{"version":3,"sources":["Components/Chat.jsx","images/avion.png","images/destination.png","images/origin.png","images/close.png","Components/Map.jsx","App.js","reportWebVitals.js","index.js"],"names":["socket","io","path","Chat","state","name","message","messages","onMessageChange","e","setState","target","value","onNameChange","onMessageSubmit","preventDefault","emit","executeScroll","messagesEnd","scrollIntoView","onopen","console","log","on","date","this","map","index","className","Date","toLocaleString","ref","el","onSubmit","onChange","label","placeholder","Component","Map","flights","positions","modals","showInformation","code","prevState","updateInfo","data","forEach","flight","window","onload","position","planeIcon","L","iconUrl","plane","iconSize","iconAnchor","destinationIcon","destination","originIcon","origin","allFlights","Marker","icon","Popup","Polyline","color","dashArray","allPositions","Object","keys","flightInfo","onClick","Modal","isOpen","src","close","alt","seats","passengers","passenger","age","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e83bf492.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport io from 'socket.io-client'\n\nconst socket = io('wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl', {\n    path: '/flights'\n});\n\nclass Chat extends Component{\n\n    state = {\n        name: \"\",\n        message: \"\",\n        messages: [],\n    };\n\n    componentDidMount() {\n        socket.onopen = () => {\n          console.log('WebSocket Client Connected');\n        };\n        socket.on(\"CHAT\", ({name, date, message}) => {\n            this.setState({messages: [ ...this.state.messages, {name, date, message}]})\n        });\n      }\n    componentDidUpdate() {\n        this.executeScroll();\n      }\n\n    onMessageChange = e => {\n        this.setState({ message: e.target.value})\n    }\n\n    onNameChange = e => {\n        this.setState({ name: e.target.value})\n    }\n\n    onMessageSubmit = e => {\n        e.preventDefault()\n        const name = this.state.name\n        const message = this.state.message\n        socket.emit('CHAT', { name, message })\n        this.setState({message: \"\"})\n        this.executeScroll()\n    }\n\n    executeScroll = () => {\n        this.messagesEnd.scrollIntoView()\n    }\n    \n\n    render(){\n\n        const messages = this.state.messages.map(({name, date, message}, index) => {\n            return (\n                <div key={index}>\n                    <div className='name-date'>\n                        <h3>{name}:</h3>\n                        <h5>{new Date(date).toLocaleString()}</h5>\n                        \n                    </div>\n                    <h4>{message}</h4>\n                    \n                </div>\n            )\n        });\n    \n        return(\n            <div>\n                <h1>Chat</h1>\n                <div className=\"messages\">\n                    {messages}\n                    <div ref={(el) => {this.messagesEnd = el; }}></div> \n                </div>\n                    <form onSubmit={this.onMessageSubmit} className=\"send-message\">\n                        <div className=\"flex\">\n                            <h2>Nombre: </h2>\n                            <input\n                                name=\"name\"\n                                onChange={(e) => this.onNameChange(e)}\n                                value={this.state.name}\n                                label=\"name\"\n                                placeholder='Escribe tu nombre...'\n                            />\n                        </div>\n                        <div className=\"flex\">\n                            <h2>Mensaje:</h2>\n                            <input\n                                name=\"message\"\n                                onChange={(e) => this.onMessageChange(e)}\n                                value={this.state.message}\n                                label=\"Message\"\n                                placeholder='Escribe un mensaje...'\n                            />\n                        </div>\n                        <button className='update-button'>Enviar</button>\n                    </form>\n            </div>\n          )\n    }\n}\n\nexport default Chat;","export default __webpack_public_path__ + \"static/media/avion.79973fe4.png\";","export default __webpack_public_path__ + \"static/media/destination.ced3e942.png\";","export default __webpack_public_path__ + \"static/media/origin.0c00614f.png\";","export default __webpack_public_path__ + \"static/media/close.4ba8920d.png\";","import React, {Component} from 'react'\nimport { MapContainer, TileLayer, Marker, Popup, Polyline } from 'react-leaflet' \nimport 'leaflet/dist/leaflet.css';\nimport io from 'socket.io-client'\nimport * as L from \"leaflet\";\nimport '../css/map.css'\nimport {Modal} from 'reactstrap'\n\n// icons\nimport plane from '../images/avion.png'\nimport destination from '../images/destination.png'\nimport origin from '../images/origin.png'\nimport close from '../images/close.png'\n\nconst socket = io('wss://tarea-3-websocket.2021-1.tallerdeintegracion.cl', {\n    path: '/flights'\n});\n\nclass Map extends Component{\n\n    state = {\n        flights : [],\n        positions: {},\n        modals: {}\n    }\n\n    componentDidMount() {\n        socket.on(\"FLIGHTS\",  (data) => {\n            this.setState({flights: data})\n            this.state.flights.forEach(flight => {\n                this.setState({modals: {...this.state.modals, [flight.code]: false}})\n            });\n        })\n        window.onload = function () {\n            socket.emit('FLIGHTS')\n        }\n        socket.on(\"POSITION\", ({code, position}) => {\n            this.setState({positions: {...this.state.positions, [code]: position}})\n        })\n    }\n\n    showInformation = (code) => {\n        console.log(this.state.modals)\n        this.setState(prevState => ({ \n            modals: {\n            ...this.state.modals,\n            [code]: !prevState.modals[code] }}));\n    }\n\n    updateInfo = () => {\n        socket.emit('FLIGHTS')\n        this.setState({positions: {}})\n    }\n\n    render(){\n\n        const planeIcon = L.icon({\n            iconUrl: plane,\n            iconSize: [60,60],\n            iconAnchor: [30,30]\n        });\n\n        const destinationIcon = L.icon({\n            iconUrl: destination,\n            iconSize: [25,40],\n            iconAnchor: [12, 40]\n        })\n\n        const originIcon = L.icon({\n            iconUrl: origin,\n            iconSize: [10,10],\n            iconAnchor: [5,5]\n        })\n\n        const allFlights = this.state.flights.map((flight, index) => {\n            return (\n                <div key={index}>\n                    <Marker position={[flight.origin[0], flight.origin[1]]} icon={originIcon}></Marker>\n                    <Marker position={[flight.destination[0], flight.destination[1]]} icon={destinationIcon}>\n                        <Popup>\n                        Codigo: {flight.code}\n                        </Popup>\n                    </Marker>\n                    <Polyline positions={[flight.origin, flight.destination]} color={'red'} dashArray={'20'} className='polylines'/>\n                </div>\n            )\n        });\n\n        const allPositions = Object.keys(this.state.positions).map((code, index) => {\n            return (\n                <Marker position={[this.state.positions[code][0],this.state.positions[code][1]]} icon={planeIcon} key={index}>\n                    <Popup>\n                        Codigo: {code}\n                    </Popup>\n                </Marker>\n            )\n        })\n\n        const flightInfo = this.state.flights.map((flight, index) => {\n            return (\n                <div key={index} className=\"flight\" onClick={() => this.showInformation(flight.code)}>\n                    <h1>{flight.code}</h1>\n                    <h3>Origen:</h3>\n                    <h4>lat: {flight.origin[0]}</h4>\n                    <h4>long: {flight.origin[1]}</h4>\n                    <h3>Destino:</h3>\n                    <h4>lat: {flight.destination[0]}</h4>\n                    <h4>long: {flight.destination[1]}</h4>\n                    <Modal isOpen={this.state.modals[flight.code]} className='modal'>\n                        <img src={close} alt=\"close\" onClick={() => this.showInformation(flight.code)}/>\n                        <h1>{flight.code}</h1>\n                        <h3>Origen: {flight.origin}</h3>\n                        <h3>Destino: {flight.destination}</h3>\n                        <h3>Avion: {flight.plane}</h3>\n                        <h3>Asientos: {flight.seats}</h3>\n                        {flight.passengers.map(passenger => (\n                            <li>{passenger.name} ({passenger.age})</li>\n                        ))}\n                    </Modal>\n                </div>\n            )\n        });\n\n        return (\n            <div>\n                <h1>Mapa</h1>\n                <MapContainer center={[-34.505, -53.09]} zoom={5} scrollWheelZoom={false} className='map'>\n                    <TileLayer\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"                    />\n                    <div>{allFlights}</div>\n                    <div>{allPositions}</div>\n                    \n                </MapContainer>\n                <div className='flight-information'>\n                    <div>\n                        <h1>Informacion de vuelos</h1>\n                        <button onClick={this.updateInfo} className='update-button'>Actualizar informacion</button>\n                    </div>\n                    {flightInfo}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Map;\n\n","import React from 'react'\nimport './App.css';\nimport './css/chat.css'\nimport './css/map.css'\nimport Chat from './Components/Chat'\nimport Map from './Components/Map'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"map-box\">\n          <Map />\n        </div>\n      <div className=\"chat-box\">\n        <Chat />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}